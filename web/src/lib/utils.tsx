import { ApiResponse } from "../hooks/useApi";
import { forOwn, head, isArray, isPlainObject, isString } from "lodash";
import { ReactNode } from "react";
import { ValidateFunction } from "ajv/dist/types";

/**
 * Build a string to use in a <title> tag.
 *
 * @param {string} [subtitle] - caller defined part of the title
 * @returns {string} full string to use in <title>
 */
export function buildTitle(subtitle?: string): string {
  return subtitle ? `${subtitle} - Meals` : "Meals";
}

/**
 * Handle errors (general, form inputs) returned by API.
 *
 * @param {ApiResponse} response - object returned from API call (see useApi
 *    hook)
 * @param {options} options - optional arguments
 * @param {string} options.defaultAlert - default message passed to setAlert
 * @param {string | undefined} options.setAlert - callback to send general error
 * @param {(path: string, error: ReactNode) => void} options.setFieldError -
 *    callback to send form input errors
 * @returns {boolean} true if response was handled as an error, false otherwise
 */
export function handledApiError(
  response: ApiResponse,
  {
    defaultAlert,
    setAlert,
    setFieldError,
  }: {
    defaultAlert?: string;
    setAlert?: (s: string | undefined) => void;
    setFieldError?: (path: string, error: ReactNode) => void;
  } = {}
): boolean {
  if (!response.isError) return false;
  if (setAlert) setAlert(response.message || defaultAlert);

  if (setFieldError) {
    forOwn(response.errors, (value, key) => setFieldError(key, head(value)));
  }

  return true;
}

/**
 * Validates data and emits relevant error messages.
 *
 * @template T - same generic type as used with validate
 * @param {ValidateFunction<T>} validate - function generated by Ajv
 * @param {object} data - data to be validated
 * @param {(message: string) => void} callback - callback to send general
 *    validation error
 * @returns {boolean} true if data was handled as invalid, false otherwise
 */
export function handledInvalidData<T>(
  validate: ValidateFunction<T>,
  data: object,
  callback: (message: string) => void
): boolean {
  if (validate(data)) return false;
  console.error("Response contained invalid information:", validate.errors);
  callback("The response to your request contained invalid information.");
  return true;
}

/**
 * Recursively convert the value for all properties with the name "id" to a
 * string.
 *
 * @param {{id?: string}} obj - object possibly containing an "id" field; can
 *    have nested objects and arrays, usually the "response.data" object in an
 *    API response.
 */
export function stringifyIdsDeeply(obj: { id?: string }) {
  forOwn(obj, (value: any, key: string | Symbol) => {
    if (isString(key)) {
      if (isArray(value)) {
        value.map((v) => stringifyIdsDeeply(v));
      } else if (isPlainObject(value)) {
        stringifyIdsDeeply(value);
      } else {
        if ("id" === key) {
          obj[key] = String(value);
        }
      }
    }
  });
}
